//imports and declaring

require('dotenv').config();
const fetch = require('node-fetch');
const {
  getCat,
  getDog,
  getFox,
  getActivity,
  getKanyeQuote,
  getAdvice,
  getFood,
  getNEPic,
  roll,
  showMenu,
} = require('./commandHandlers');
const { msgHandling, log } = require('./functions');
const { Telegraf } = require('telegraf');

const bot = new Telegraf(process.env.BOT_TOKEN);

//handling of start and help commands

bot.start((ctx) =>
  ctx.reply(
    `Hey there, ${ctx.from.first_name}\nUse the menu below to find things you like or type /help to get the full list of commands`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'Animals', callback_data: 'animals' },
            { text: 'Advices', callback_data: 'advices' },
          ],
          [
            { text: 'Artificially Generated', callback_data: 'artgen' },
            { text: 'Other', callback_data: 'other' },
          ],
        ],
      },
    }
  )
);

bot.help((ctx) =>
  ctx.replyWithHTML(
    '<b>Animals</b>\n/doggins - random fact about dogs along with random dog picture\n/catto - random fact about cats along with random cat picture\n/foxy - random fox picture\n\n<b>Advices</b>\n/advice - random advice\n/imbored - random activity\n/kanye - random Kanye West quote\n\n<b>Artificially generated</b>\n/somebody - random non-existing person photo, generated by StyleGAN2\n/somekitty - random non-existing cat photo, generated by StyleGAN2\n/something - random non-existing artpiece, generated by StyleGAN2\n\n<b>Other</>\n/roll - random number between 1 and 100\n/imhungry - random food picture\n\n<b>System commands</>\n/menu - shows inline menu'
  )
);

//Animals submenu

bot.action('animals', (ctx) => {
  ctx.deleteMessage();
  ctx.reply('Which animals do you prefer?', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '😺 Cats', callback_data: 'cats' },
          { text: '🐶 Dogs', callback_data: 'dogs' },
        ],
        [
          { text: '🦊 Foxes', callback_data: 'foxes' },
          { text: '◀️ Back', callback_data: 'back' },
        ],
      ],
    },
  });
});

bot.action('cats', (ctx) => {
  getCat(bot, ctx);
  ctx.answerCbQuery();
});

bot.action('dogs', (ctx) => {
  getDog(bot, ctx);
  ctx.answerCbQuery();
});

bot.action('foxes', (ctx) => {
  getFox(bot, ctx);
  ctx.answerCbQuery();
});

//Advices submenu

bot.action('advices', (ctx) => {
  ctx.deleteMessage();
  ctx.reply('What sort of advice you need?', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '☝️ Just a usual advice', callback_data: 'advice' },
          { text: '🥱 Some activity', callback_data: 'bored' },
        ],
        [
          { text: '🧔🏿 Kanye West quote', callback_data: 'kanye' },
          { text: '◀️ Back', callback_data: 'back' },
        ],
      ],
    },
  });
});

bot.action('advice', (ctx) => {
  getAdvice(bot, ctx);
  ctx.answerCbQuery();
});

bot.action('bored', (ctx) => {
  getActivity(bot, ctx);
  ctx.answerCbQuery();
});

bot.action('kanye', (ctx) => {
  getKanyeQuote(bot, ctx);
  ctx.answerCbQuery();
});

//Artificially Generated submenu

bot.action('artgen', (ctx) => {
  ctx.deleteMessage();
  ctx.reply('What kind of artificially generated content are you intrested in?', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '👨 People', callback_data: 'smbd' },
          { text: '😼 Cats', callback_data: 'smct' },
        ],
        [
          { text: '🖼 Art', callback_data: 'smrt' },
          { text: '◀️ Back', callback_data: 'back' },
        ],
      ],
    },
  });
});

bot.action('smbd', async (ctx) => {
  log(bot, ctx);
  const photo = getNEPic('https://thispersondoesnotexist.com/image');
  await ctx.replyWithChatAction('upload_photo');
  await ctx.replyWithPhoto(photo);
  ctx.answerCbQuery();
});

bot.action('smct', async (ctx) => {
  log(bot, ctx);
  const photo = getNEPic('https://thiscatdoesnotexist.com/');
  await ctx.replyWithChatAction('upload_photo');
  await ctx.replyWithPhoto(photo);
  ctx.answerCbQuery();
});

bot.action('smrt', async (ctx) => {
  log(bot, ctx);
  const photo = getNEPic('https://thisartworkdoesnotexist.com/');
  await ctx.replyWithChatAction('upload_photo');
  await ctx.replyWithPhoto(photo);
  ctx.answerCbQuery();
});

// Other submenu

bot.action('other', (ctx) => {
  ctx.deleteMessage();
  ctx.reply('Are you enjoying some of that?', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '🔢 Numbers', callback_data: 'num' },
          { text: '🍕 Food', callback_data: 'food' },
        ],
        [{ text: '◀️ Back', callback_data: 'back' }],
      ],
    },
  });
});

bot.action('num', (ctx) => {
  roll(bot, ctx);
  ctx.answerCbQuery();
});

bot.action('food', (ctx) => {
  getFood(bot, ctx);
  ctx.answerCbQuery();
});

// Back button

bot.action('back', (ctx) => {
  ctx.deleteMessage();
  showMenu(bot, ctx);
});

//handling other comands

bot.command('roll', (ctx) => roll(bot, ctx));

bot.command('doggins', (ctx) => getDog(bot, ctx));

bot.command('catto', (ctx) => getCat(bot, ctx));

bot.command('foxy', (ctx) => getFox(bot, ctx));

bot.command('imbored', (ctx) => getActivity(bot, ctx));

bot.command('kanye', (ctx) => getKanyeQuote(bot, ctx));

bot.command('advice', (ctx) => getAdvice(bot, ctx));

bot.command('imhungry', (ctx) => getFood(bot, ctx));

bot.command('somebody', async (ctx) => {
  log(bot, ctx);
  const photo = getNEPic('https://thispersondoesnotexist.com/image', bot, ctx);
  await ctx.replyWithChatAction('upload_photo');
  await ctx.replyWithPhoto(photo);
});

bot.command('somekitty', async (ctx) => {
  log(bot, ctx);
  const photo = getNEPic('https://thiscatdoesnotexist.com/');
  await ctx.replyWithChatAction('upload_photo');
  await ctx.replyWithPhoto(photo);
});

bot.command('something', async (ctx) => {
  log(bot, ctx);
  const photo = getNEPic('https://thisartworkdoesnotexist.com/');
  await ctx.replyWithChatAction('upload_photo');
  await ctx.replyWithPhoto(photo);
});

bot.command('menu', (ctx) => showMenu(bot, ctx));

bot.on('message', (ctx) => {
  return msgHandling(bot, ctx);
});

//finally launching the bot

bot.launch();
